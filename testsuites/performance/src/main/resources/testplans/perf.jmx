<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Policy XACML PDP Performance" enabled="true">
      <stringProp name="TestPlan.comments">Policy XACML PDP Performance Tests</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="DURATION" elementType="Argument">
            <stringProp name="Argument.name">DURATION</stringProp>
            <stringProp name="Argument.value">${__P(duration, 1200)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERS" elementType="Argument">
            <stringProp name="Argument.name">USERS</stringProp>
            <stringProp name="Argument.value">${__P(users, 10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HTTP" elementType="Argument">
            <stringProp name="Argument.name">HTTP</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="API_HOST" elementType="Argument">
            <stringProp name="Argument.name">API_HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PAP_HOST" elementType="Argument">
            <stringProp name="Argument.name">PAP_HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XACML_HOST" elementType="Argument">
            <stringProp name="Argument.name">XACML_HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="API_PORT" elementType="Argument">
            <stringProp name="Argument.name">API_PORT</stringProp>
            <stringProp name="Argument.value">${__P(api_port, 30002)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PAP_PORT" elementType="Argument">
            <stringProp name="Argument.name">PAP_PORT</stringProp>
            <stringProp name="Argument.value">${__P(pap_port, 30003)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XACML_PORT" elementType="Argument">
            <stringProp name="Argument.name">XACML_PORT</stringProp>
            <stringProp name="Argument.value">${__P(xacml_port, 30004)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="API_USER" elementType="Argument">
            <stringProp name="Argument.name">API_USER</stringProp>
            <stringProp name="Argument.value">policyadmin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PAP_USER" elementType="Argument">
            <stringProp name="Argument.name">PAP_USER</stringProp>
            <stringProp name="Argument.value">policyadmin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XACML_USER" elementType="Argument">
            <stringProp name="Argument.name">XACML_USER</stringProp>
            <stringProp name="Argument.value">policyadmin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="API_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">API_PASSWORD</stringProp>
            <stringProp name="Argument.value">zb!XztG34</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PAP_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PAP_PASSWORD</stringProp>
            <stringProp name="Argument.value">zb!XztG34</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XACML_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">XACML_PASSWORD</stringProp>
            <stringProp name="Argument.value">zb!XztG34</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.start_time">1587406332000</longProp>
        <longProp name="ThreadGroup.end_time">1587406332000</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Monitoring Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;topology_template&quot;: {&#xd;
        &quot;policies&quot;: [&#xd;
            {&#xd;
                &quot;onap.restart.tca&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.monitoring.tcagen2&quot;,&#xd;
                    &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;onap.restart.tca&quot;&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;tca_policy&quot; : {&#xd;
                            &quot;domain&quot;: &quot;measurementsForVfScaling&quot;,&#xd;
                            &quot;metricsPerEventName&quot;: [&#xd;
                                {&#xd;
                                    &quot;eventName&quot;: &quot;Measurement_vGMUX&quot;,&#xd;
                                    &quot;controlLoopSchemaType&quot;: &quot;VNF&quot;,&#xd;
                                    &quot;policyScope&quot;: &quot;DCAE&quot;,&#xd;
                                    &quot;policyName&quot;: &quot;DCAE.Config_tca-hi-lo&quot;,&#xd;
                                    &quot;policyVersion&quot;: &quot;v0.0.1&quot;,&#xd;
                                    &quot;thresholds&quot;: [&#xd;
                                        {&#xd;
                                            &quot;closedLoopControlName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,&#xd;
                                            &quot;version&quot;: &quot;1.0.2&quot;,&#xd;
                                            &quot;fieldPath&quot;: &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;,&#xd;
                                            &quot;thresholdValue&quot;: 0,&#xd;
                                            &quot;direction&quot;: &quot;EQUAL&quot;,&#xd;
                                            &quot;severity&quot;: &quot;MAJOR&quot;,&#xd;
                                            &quot;closedLoopEventStatus&quot;: &quot;ABATED&quot;&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;closedLoopControlName&quot;: &quot;ControlLoop-vCPE-48f0c2c3-a172-4192-9ae3-052274181b6e&quot;,&#xd;
                                            &quot;version&quot;: &quot;1.0.2&quot;,&#xd;
                                            &quot;fieldPath&quot;: &quot;$.event.measurementsForVfScalingFields.additionalMeasurements[*].arrayOfFields[0].value&quot;,&#xd;
                                            &quot;thresholdValue&quot;: 0,&#xd;
                                            &quot;direction&quot;: &quot;GREATER&quot;,&#xd;
                                            &quot;severity&quot;: &quot;CRITICAL&quot;,&#xd;
                                            &quot;closedLoopEventStatus&quot;: &quot;ONSET&quot;&#xd;
                                        }&#xd;
                                    ]&#xd;
                                }&#xd;
                            ]&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/api/v1/policytypes/onap.policies.monitoring.tcagen2/versions/1.0.0/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${API_HOST}:${API_PORT}/policy/api/v1</stringProp>
                <stringProp name="Authorization.username">${API_USER}</stringProp>
                <stringProp name="Authorization.password">${API_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Optimization Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
    &quot;topology_template&quot;: {&#xd;
        &quot;policies&quot;: [&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.Affinity_Default&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.resource.AffinityPolicy&quot;,&#xd;
                    &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.Affinity_Default&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [],&#xd;
                        &quot;services&quot;: [],&#xd;
                        &quot;resources&quot;: [],&#xd;
                        &quot;geography&quot;: [],&#xd;
                        &quot;identity&quot;: &quot;affinity_vCPE&quot;,&#xd;
                        &quot;applicableResources&quot;: &quot;any&quot;,&#xd;
                        &quot;affinityProperties&quot;: {&#xd;
                            &quot;qualifier&quot;: &quot;same&quot;,&#xd;
                            &quot;category&quot;: &quot;complex&quot;&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            },&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.Affinity_Default_US&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.resource.AffinityPolicy&quot;,&#xd;
                    &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.Affinity_Default_US&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [],&#xd;
                        &quot;services&quot;: [],&#xd;
                        &quot;resources&quot;: [],&#xd;
                        &quot;geography&quot;: [&#xd;
                            &quot;US&quot;&#xd;
                        ],&#xd;
                        &quot;identity&quot;: &quot;affinity_vCPE&quot;,&#xd;
                        &quot;applicableResources&quot;: &quot;any&quot;,&#xd;
                        &quot;affinityProperties&quot;: {&#xd;
                            &quot;qualifier&quot;: &quot;same&quot;,&#xd;
                            &quot;category&quot;: &quot;complex&quot;&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            },&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.Affinity_Default_vCPE_US_0&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.resource.AffinityPolicy&quot;,&#xd;
                    &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.Affinity_Default_vCPE_US_0&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [],&#xd;
                        &quot;services&quot;: [&#xd;
                            &quot;vCPE&quot;&#xd;
                        ],&#xd;
                        &quot;resources&quot;: [],&#xd;
                        &quot;geography&quot;: [&#xd;
                            &quot;US&quot;&#xd;
                        ],&#xd;
                        &quot;identity&quot;: &quot;affinity_vCPE&quot;,&#xd;
                        &quot;applicableResources&quot;: &quot;any&quot;,&#xd;
                        &quot;affinityProperties&quot;: {&#xd;
                            &quot;qualifier&quot;: &quot;different&quot;,&#xd;
                            &quot;category&quot;: &quot;complex&quot;&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            },&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.Affinity_vCPE_US_Gold_1&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.resource.AffinityPolicy&quot;,&#xd;
                    &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.Affinity_vCPE_1&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [&#xd;
                            &quot;gold&quot;&#xd;
                        ],&#xd;
                        &quot;services&quot;: [&#xd;
                            &quot;vCPE&quot;&#xd;
                        ],&#xd;
                        &quot;resources&quot;: [&#xd;
                            &quot;vGMuxInfra&quot;,&#xd;
                            &quot;vG&quot;&#xd;
                        ],&#xd;
                        &quot;geography&quot;: [&#xd;
                            &quot;US&quot;,&#xd;
                            &quot;INTERNATIONAL&quot;&#xd;
                        ],&#xd;
                        &quot;identity&quot;: &quot;affinity_vCPE&quot;,&#xd;
                        &quot;applicableResources&quot;: &quot;any&quot;,&#xd;
                        &quot;affinityProperties&quot;: {&#xd;
                            &quot;qualifier&quot;: &quot;same&quot;,&#xd;
                            &quot;category&quot;: &quot;availabilityZone&quot;&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            },&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.Affinity_vCPE_US_Platinum_1&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.resource.AffinityPolicy&quot;,&#xd;
                    &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.Affinity_vCPE_1&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [&#xd;
                            &quot;platinum&quot;&#xd;
                        ],&#xd;
                        &quot;services&quot;: [&#xd;
                            &quot;vCPE&quot;&#xd;
                        ],&#xd;
                        &quot;resources&quot;: [&#xd;
                            &quot;vGMuxInfra&quot;,&#xd;
                            &quot;vG&quot;&#xd;
                        ],&#xd;
                        &quot;geography&quot;: [&#xd;
                            &quot;US&quot;,&#xd;
                            &quot;INTERNATIONAL&quot;&#xd;
                        ],&#xd;
                        &quot;identity&quot;: &quot;affinity_vCPE&quot;,&#xd;
                        &quot;applicableResources&quot;: &quot;any&quot;,&#xd;
                        &quot;affinityProperties&quot;: {&#xd;
                            &quot;qualifier&quot;: &quot;different&quot;,&#xd;
                            &quot;category&quot;: &quot;availabilityZone&quot;&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            },&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.Capacity_vG_1&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.resource.Vim_fit&quot;,&#xd;
                    &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.Capacity_vG_1&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [],&#xd;
                        &quot;services&quot;: [&#xd;
                            &quot;vCPE&quot;&#xd;
                        ],&#xd;
                        &quot;resources&quot;: [&#xd;
                            &quot;vG&quot;&#xd;
                        ],&#xd;
                        &quot;geography&quot;: [&#xd;
                            &quot;US&quot;,&#xd;
                            &quot;INTERNATIONAL&quot;&#xd;
                        ],&#xd;
                        &quot;identity&quot;: &quot;capacity_vG&quot;,&#xd;
                        &quot;applicableResources&quot;: &quot;any&quot;,&#xd;
                        &quot;capacityProperty&quot;: {&#xd;
                            &quot;controller&quot;: &quot;multicloud&quot;,&#xd;
                            &quot;request&quot;: &quot;{\&quot;vCPU\&quot;: 10, \&quot;Memory\&quot;: {\&quot;quantity\&quot;: {\&quot;get_param\&quot;: \&quot;REQUIRED_MEM\&quot;}, \&quot;unit\&quot;: \&quot;GB\&quot;}, \&quot;Storage\&quot;: {\&quot;quantity\&quot;: {\&quot;get_param\&quot;: \&quot;REQUIRED_DISK\&quot;}, \&quot;unit\&quot;: \&quot;GB\&quot;}}&quot;&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            },&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.Capacity_vG_2&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.resource.Vim_fit&quot;,&#xd;
                    &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.Capacity_vG_2&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [],&#xd;
                        &quot;services&quot;: [&#xd;
                            &quot;vCPE&quot;&#xd;
                        ],&#xd;
                        &quot;resources&quot;: [&#xd;
                            &quot;vG&quot;&#xd;
                        ],&#xd;
                        &quot;geography&quot;: [&#xd;
                            &quot;US&quot;,&#xd;
                            &quot;INTERNATIONAL&quot;&#xd;
                        ],&#xd;
                        &quot;identity&quot;: &quot;capacity_vG&quot;,&#xd;
                        &quot;applicableResources&quot;: &quot;any&quot;,&#xd;
                        &quot;capacityProperty&quot;: {&#xd;
                            &quot;controller&quot;: &quot;multicloud&quot;,&#xd;
                            &quot;request&quot;: &quot;{\&quot;vCPU\&quot;: 15, \&quot;Memory\&quot;: {\&quot;quantity\&quot;: {\&quot;get_param\&quot;: \&quot;REQUIRED_MEM\&quot;}, \&quot;unit\&quot;: \&quot;MB\&quot;}, \&quot;Storage\&quot;: {\&quot;quantity\&quot;: {\&quot;get_param\&quot;: \&quot;REQUIRED_DISK\&quot;}, \&quot;unit\&quot;: \&quot;GB\&quot;}}&quot;&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            },&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.Distance_vG_1&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.resource.DistancePolicy&quot;,&#xd;
                    &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.Distance_vG_1&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [&#xd;
                            &quot;platinum&quot;&#xd;
                        ],&#xd;
                        &quot;services&quot;: [&#xd;
                            &quot;vCPE&quot;&#xd;
                        ],&#xd;
                        &quot;resources&quot;: [&#xd;
                            &quot;vG&quot;&#xd;
                        ],&#xd;
                        &quot;geography&quot;: [&#xd;
                            &quot;US&quot;,&#xd;
                            &quot;INTERNATIONAL&quot;&#xd;
                        ],&#xd;
                        &quot;identity&quot;: &quot;distance-vG&quot;,&#xd;
                        &quot;applicableResources&quot;: &quot;any&quot;,&#xd;
                        &quot;distanceProperties&quot;: {&#xd;
                            &quot;locationInfo&quot;: &quot;customer_loc&quot;,&#xd;
                            &quot;distance&quot;: {&#xd;
                                &quot;value&quot;: 1500,&#xd;
                                &quot;operator&quot;: &quot;&lt;&quot;,&#xd;
                                &quot;unit&quot;: &quot;km&quot;&#xd;
                            }&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            },&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.hpa_policy_Default&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.resource.HpaPolicy&quot;,&#xd;
                    &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.hpa_policy_Default&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [],&#xd;
                        &quot;services&quot;: [],&#xd;
                        &quot;resources&quot;: [],&#xd;
                        &quot;geography&quot;: [],&#xd;
                        &quot;identity&quot;: &quot;hpa-vG&quot;,&#xd;
                        &quot;flavorFeatures&quot;: [&#xd;
                            {&#xd;
                                &quot;id&quot;: &quot;vg_1&quot;,&#xd;
                                &quot;type&quot;: &quot;vnfc&quot;,&#xd;
                                &quot;directives&quot;: [&#xd;
                                    {&#xd;
                                        &quot;type&quot;: &quot;flavor_directives&quot;,&#xd;
                                        &quot;attributes&quot;: [&#xd;
                                            {&#xd;
                                                &quot;attribute_name&quot;: &quot;flavor_label_vm_01&quot;,&#xd;
                                                &quot;attribute_value&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        ]&#xd;
                                    }&#xd;
                                ],&#xd;
                                &quot;flavorProperties&quot;: [&#xd;
                                    {&#xd;
                                        &quot;hpa-feature&quot;: &quot;basicCapabilities&quot;,&#xd;
                                        &quot;mandatory&quot;: true,&#xd;
                                        &quot;architecture&quot;: &quot;generic&quot;,&#xd;
                                        &quot;directives&quot;: [],&#xd;
                                        &quot;hpa-feature-attributes&quot;: [&#xd;
                                            {&#xd;
                                                &quot;hpa-attribute-key&quot;: &quot;numVirtualCpu&quot;,&#xd;
                                                &quot;hpa-attribute-value&quot;: 8,&#xd;
                                                &quot;operator&quot;: [&#xd;
                                                    &quot;&gt;=&quot;&#xd;
                                                ],&#xd;
                                                &quot;unit&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;hpa-attribute-key&quot;: &quot;virtualMemSize&quot;,&#xd;
                                                &quot;hpa-attribute-value&quot;: 6,&#xd;
                                                &quot;operator&quot;: [&#xd;
                                                    &quot;&lt;=&quot;&#xd;
                                                ],&#xd;
                                                &quot;unit&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        ]&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;hpa-feature&quot;: &quot;ovsDpdk&quot;,&#xd;
                                        &quot;mandatory&quot;: false,&#xd;
                                        &quot;architecture&quot;: &quot;generic&quot;,&#xd;
                                        &quot;directives&quot;: [],&#xd;
                                        &quot;hpa-feature-attributes&quot;: [&#xd;
                                            {&#xd;
                                                &quot;hpa-attribute-key&quot;: &quot;dataProcessingAccelerationLibrary&quot;,&#xd;
                                                &quot;hpa-attribute-value&quot;: &quot;ovsDpdk_version&quot;,&#xd;
                                                &quot;operator&quot;: [&#xd;
                                                    &quot;=&quot;&#xd;
                                                ],&#xd;
                                                &quot;unit&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        ]&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                }&#xd;
            },&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.hpa_policy_vG_1&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.resource.HpaPolicy&quot;,&#xd;
                    &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.hpa_policy_vG_1&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [],&#xd;
                        &quot;services&quot;: [&#xd;
                            &quot;vCPE&quot;,&#xd;
                            &quot;vOtherService&quot;&#xd;
                        ],&#xd;
                        &quot;resources&quot;: [&#xd;
                            &quot;vG&quot;&#xd;
                        ],&#xd;
                        &quot;geography&quot;: [],&#xd;
                        &quot;identity&quot;: &quot;hpa-vG&quot;,&#xd;
                        &quot;flavorFeatures&quot;: [&#xd;
                            {&#xd;
                                &quot;id&quot;: &quot;vg_1&quot;,&#xd;
                                &quot;type&quot;: &quot;vnfc&quot;,&#xd;
                                &quot;directives&quot;: [&#xd;
                                    {&#xd;
                                        &quot;type&quot;: &quot;flavor_directives&quot;,&#xd;
                                        &quot;attributes&quot;: [&#xd;
                                            {&#xd;
                                                &quot;attribute_name&quot;: &quot;flavor_label_vm_01&quot;,&#xd;
                                                &quot;attribute_value&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        ]&#xd;
                                    }&#xd;
                                ],&#xd;
                                &quot;flavorProperties&quot;: [&#xd;
                                    {&#xd;
                                        &quot;hpa-feature&quot;: &quot;basicCapabilities&quot;,&#xd;
                                        &quot;mandatory&quot;: true,&#xd;
                                        &quot;architecture&quot;: &quot;generic&quot;,&#xd;
                                        &quot;directives&quot;: [],&#xd;
                                        &quot;hpa-feature-attributes&quot;: [&#xd;
                                            {&#xd;
                                                &quot;hpa-attribute-key&quot;: &quot;numVirtualCpu&quot;,&#xd;
                                                &quot;hpa-attribute-value&quot;: 6,&#xd;
                                                &quot;operator&quot;: [&#xd;
                                                    &quot;&gt;=&quot;&#xd;
                                                ],&#xd;
                                                &quot;unit&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            {&#xd;
                                                &quot;hpa-attribute-key&quot;: &quot;virtualMemSize&quot;,&#xd;
                                                &quot;hpa-attribute-value&quot;: 4,&#xd;
                                                &quot;operator&quot;: [&#xd;
                                                    &quot;&lt;=&quot;&#xd;
                                                ],&#xd;
                                                &quot;unit&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        ]&#xd;
                                    },&#xd;
                                    {&#xd;
                                        &quot;hpa-feature&quot;: &quot;ovsDpdk&quot;,&#xd;
                                        &quot;mandatory&quot;: false,&#xd;
                                        &quot;architecture&quot;: &quot;generic&quot;,&#xd;
                                        &quot;directives&quot;: [],&#xd;
                                        &quot;hpa-feature-attributes&quot;: [&#xd;
                                            {&#xd;
                                                &quot;hpa-attribute-key&quot;: &quot;dataProcessingAccelerationLibrary&quot;,&#xd;
                                                &quot;hpa-attribute-value&quot;: &quot;ovsDpdk_version&quot;,&#xd;
                                                &quot;operator&quot;: [&#xd;
                                                    &quot;=&quot;&#xd;
                                                ],&#xd;
                                                &quot;unit&quot;: &quot;&quot;&#xd;
                                            }&#xd;
                                        ]&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                }&#xd;
            },&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.queryPolicy_vCPE&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.service.QueryPolicy&quot;,&#xd;
                    &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.queryPolicy_vCPE&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [],&#xd;
                        &quot;services&quot;: [&#xd;
                            &quot;vCPE&quot;&#xd;
                        ],&#xd;
                        &quot;geography&quot;: [&#xd;
                            &quot;US&quot;,&#xd;
                            &quot;INTERNATIONAL&quot;&#xd;
                        ],&#xd;
                        &quot;identity&quot;: &quot;vCPE_Query_Policy&quot;,&#xd;
                        &quot;queryProperties&quot;: [&#xd;
                            {&#xd;
                                &quot;attribute&quot;: &quot;locationId&quot;,&#xd;
                                &quot;attribute_location&quot;: &quot;customerLocation&quot;,&#xd;
                                &quot;value&quot;: &quot;&quot;&#xd;
                            },&#xd;
                            {&#xd;
                                &quot;attribute&quot;: &quot;id&quot;,&#xd;
                                &quot;attribute_location&quot;: &quot;vpnInfo.vpnId&quot;,&#xd;
                                &quot;value&quot;: &quot;&quot;&#xd;
                            },&#xd;
                            {&#xd;
                                &quot;attribute&quot;: &quot;upstreamBW&quot;,&#xd;
                                &quot;attribute_location&quot;: &quot;vpnInfo.upstreamBW&quot;,&#xd;
                                &quot;value&quot;: &quot;&quot;&#xd;
                            },&#xd;
                            {&#xd;
                                &quot;attribute&quot;: &quot;customerLatitude&quot;,&#xd;
                                &quot;attribute_location&quot;: &quot;customerLatitude&quot;,&#xd;
                                &quot;value&quot;: 1.1&#xd;
                            },&#xd;
                            {&#xd;
                                &quot;attribute&quot;: &quot;customerLongitude&quot;,&#xd;
                                &quot;attribute_location&quot;: &quot;customerLongitude&quot;,&#xd;
                                &quot;value&quot;: 2.2&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                }&#xd;
            },&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.SubscriberPolicy_v1&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.service.SubscriberPolicy&quot;,&#xd;
                    &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.SubscriberPolicy_v1&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [],&#xd;
                        &quot;services&quot;: [&#xd;
                            &quot;vCPE&quot;&#xd;
                        ],&#xd;
                        &quot;identity&quot;: &quot;subscriber_vCPE&quot;,&#xd;
                        &quot;subscriberProperties&quot;: {&#xd;
                            &quot;subscriberName&quot;: [&#xd;
                                &quot;subscriber_x&quot;,&#xd;
                                &quot;subscriber_y&quot;&#xd;
                            ],&#xd;
                            &quot;subscriberRole&quot;: [&#xd;
                                &quot;platinum&quot;&#xd;
                            ],&#xd;
                            &quot;provStatus&quot;: [&#xd;
                                &quot;CAPPED&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            },&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.SubscriberPolicy_v2&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.service.SubscriberPolicy&quot;,&#xd;
                    &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.SubscriberPolicy_v2&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [],&#xd;
                        &quot;services&quot;: [&#xd;
                            &quot;vCPE&quot;&#xd;
                        ],&#xd;
                        &quot;identity&quot;: &quot;subscriber_vCPE&quot;,&#xd;
                        &quot;subscriberProperties&quot;: {&#xd;
                            &quot;subscriberName&quot;: [&#xd;
                                &quot;subscriber_a&quot;,&#xd;
                                &quot;subscriber_b&quot;&#xd;
                            ],&#xd;
                            &quot;subscriberRole&quot;: [&#xd;
                                &quot;gold&quot;&#xd;
                            ],&#xd;
                            &quot;provStatus&quot;: [&#xd;
                                &quot;CAPPED&quot;&#xd;
                            ]&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            },&#xd;
            {&#xd;
                &quot;OSDF_CASABLANCA.vnfPolicy_vG&quot;: {&#xd;
                    &quot;type&quot;: &quot;onap.policies.optimization.resource.VnfPolicy&quot;,&#xd;
                    &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
                    &quot;metadata&quot;: {&#xd;
                        &quot;policy-id&quot;: &quot;OSDF_CASABLANCA.vnfPolicy_vG&quot;,&#xd;
                        &quot;policy-version&quot;: 1&#xd;
                    },&#xd;
                    &quot;properties&quot;: {&#xd;
                        &quot;scope&quot;: [],&#xd;
                        &quot;services&quot;: [&#xd;
                            &quot;vCPE&quot;&#xd;
                        ],&#xd;
                        &quot;resources&quot;: [&#xd;
                            &quot;vG&quot;&#xd;
                        ],&#xd;
                        &quot;geography&quot;: [&#xd;
                            &quot;US&quot;,&#xd;
                            &quot;INTERNATIONAL&quot;&#xd;
                        ],&#xd;
                        &quot;identity&quot;: &quot;vnf_vG&quot;,&#xd;
                        &quot;applicableResources&quot;: &quot;any&quot;,&#xd;
                        &quot;vnfProperties&quot;: [&#xd;
                            {&#xd;
                                &quot;inventoryProvider&quot;: &quot;aai&quot;,&#xd;
                                &quot;serviceType&quot;: &quot;&quot;,&#xd;
                                &quot;inventoryType&quot;: &quot;cloudRegionId&quot;,&#xd;
                                &quot;customerId&quot;: &quot;&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/api/v1/policytypes/onap.policies.optimization.resource.AffinityPolicy/versions/1.0.0/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${API_HOST}:${API_PORT}/policy/api/v1</stringProp>
                <stringProp name="Authorization.username">${API_USER}</stringProp>
                <stringProp name="Authorization.password">${API_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Min/Max Guard Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
  &quot;topology_template&quot;: {&#xd;
    &quot;policies&quot;: [&#xd;
      {&#xd;
        &quot;guard.minmax.scaleout&quot;: {&#xd;
          &quot;type&quot;: &quot;onap.policies.controlloop.guard.common.MinMax&quot;,&#xd;
          &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
          &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
          &quot;metadata&quot;: {&#xd;
            &quot;policy-id&quot;: &quot;guard.minmax.scaleout&quot;&#xd;
          },&#xd;
          &quot;properties&quot;: {&#xd;
            &quot;actor&quot;: &quot;SO&quot;,&#xd;
            &quot;operation&quot;: &quot;VF Module Create&quot;,&#xd;
            &quot;id&quot;: &quot;ControlLoop-vDNS-6f37f56d-a87d-4b85-b6a9-cc953cf779b3&quot;,&#xd;
            &quot;target&quot;: &quot;e6130d03-56f1-4b0a-9a1d-e1b2ebc30e0e&quot;,&#xd;
            &quot;min&quot;: 1,&#xd;
            &quot;max&quot;: 2&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/api/v1/policytypes/onap.policies.controlloop.guard.common.MinMax/versions/1.0.0/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${API_HOST}:${API_PORT}/policy/api/v1</stringProp>
                <stringProp name="Authorization.username">${API_USER}</stringProp>
                <stringProp name="Authorization.password">${API_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Frequency Limiter Guard Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;tosca_definitions_version&quot;: &quot;tosca_simple_yaml_1_1_0&quot;,&#xd;
  &quot;topology_template&quot;: {&#xd;
    &quot;policies&quot;: [&#xd;
      {&#xd;
        &quot;guard.frequency.scaleout&quot;: {&#xd;
          &quot;type&quot;: &quot;onap.policies.controlloop.guard.common.FrequencyLimiter&quot;,&#xd;
          &quot;type_version&quot;: &quot;1.0.0&quot;,&#xd;
          &quot;version&quot;: &quot;1.0.0&quot;,&#xd;
          &quot;metadata&quot;: {&#xd;
            &quot;policy-id&quot;: &quot;guard.frequency.scaleout&quot;&#xd;
          },&#xd;
          &quot;properties&quot;: {&#xd;
            &quot;actor&quot;: &quot;SO&quot;,&#xd;
            &quot;operation&quot;: &quot;VF Module Create&quot;,&#xd;
            &quot;id&quot;: &quot;ControlLoop-vDNS-6f37f56d-a87d-4b85-b6a9-cc953cf779b3&quot;,&#xd;
            &quot;timeWindow&quot;: 10,&#xd;
            &quot;timeUnits&quot;: &quot;minute&quot;,&#xd;
            &quot;limit&quot;: 1&#xd;
          }&#xd;
        }&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/api/v1/policytypes/onap.policies.controlloop.guard.common.FrequencyLimiter/versions/1.0.0/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${API_HOST}:${API_PORT}/policy/api/v1</stringProp>
                <stringProp name="Authorization.username">${API_USER}</stringProp>
                <stringProp name="Authorization.password">${API_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deploy Monitoring Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;policies&quot;:[{&quot;policy-id&quot;:&quot;onap.restart.tca&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${PAP_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${PAP_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pap/v1/pdps/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${PAP_HOST}:${PAP_PORT}/policy/pap/v1</stringProp>
                <stringProp name="Authorization.username">${PAP_USER}</stringProp>
                <stringProp name="Authorization.password">${PAP_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49588">202</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deploy Optimization Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;policies&quot;:[{&quot;policy-id&quot;:&quot;OSDF_CASABLANCA.Affinity_Default&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${PAP_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${PAP_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pap/v1/pdps/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${PAP_HOST}:${PAP_PORT}/policy/pap/v1</stringProp>
                <stringProp name="Authorization.username">${PAP_USER}</stringProp>
                <stringProp name="Authorization.password">${PAP_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49588">202</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deploy Min/Max Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;policies&quot;:[{&quot;policy-id&quot;:&quot;guard.minmax.scaleout&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${PAP_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${PAP_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pap/v1/pdps/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${PAP_HOST}:${PAP_PORT}/policy/pap/v1</stringProp>
                <stringProp name="Authorization.username">${PAP_USER}</stringProp>
                <stringProp name="Authorization.password">${PAP_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49588">202</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deploy Frequency Limiter Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;policies&quot;:[{&quot;policy-id&quot;:&quot;guard.frequency.scaleout&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${PAP_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${PAP_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pap/v1/pdps/policies</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${PAP_HOST}:${PAP_PORT}/policy/pap/v1</stringProp>
                <stringProp name="Authorization.username">${PAP_USER}</stringProp>
                <stringProp name="Authorization.password">${PAP_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49588">202</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/tmp/pdpx_perf_setup.log</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Policy XACML PDP Health Check " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${USERS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <longProp name="ThreadGroup.start_time">1587406332000</longProp>
        <longProp name="ThreadGroup.end_time">1587406332000</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Health" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${XACML_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${XACML_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pdpx/v1/healthcheck</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
          <stringProp name="TestPlan.comments">Basic Health Check</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def res = [];
if (prev.getResponseCode() == &apos;200&apos;) {
    def jsonSlurper = new JsonSlurper();
    res = jsonSlurper.parseText(prev.getResponseDataAsString());

    assert res instanceof Map;
    assert res.code == 200;

}</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">${HTTP}://${XACML_HOST}:${XACML_PORT}/policy/pdpx/v1</stringProp>
              <stringProp name="Authorization.username">${XACML_USER}</stringProp>
              <stringProp name="Authorization.password">${XACML_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.clearEachIteration">true</boolProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/tmp/pdpx_perf_health.log</stringProp>
          <stringProp name="TestPlan.comments">	</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="XACML PDP Decisions" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${USERS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <longProp name="ThreadGroup.start_time">1587406332000</longProp>
        <longProp name="ThreadGroup.end_time">1587406332000</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Monitoring Decisions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;ONAPName&quot;: &quot;DCAE&quot;,&#xd;
  &quot;ONAPComponent&quot;: &quot;PolicyHandler&quot;,&#xd;
  &quot;ONAPInstance&quot;: &quot;622431a4-9dea-4eae-b443-3b2164639c64&quot;,&#xd;
  &quot;action&quot;: &quot;configure&quot;,&#xd;
  &quot;resource&quot;: {&#xd;
      &quot;policy-id&quot;: &quot;onap.restart.tca&quot;,&#xd;
      &quot;policy-type&quot;: &quot;onap.policies.monitoring.tcagen2&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${XACML_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${XACML_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pdpx/v1/decision</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
          <stringProp name="TestPlan.comments">Get Configuration Data for Monitoring Policy</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3575610">type</stringProp>
              <stringProp name="-450004177">metadata</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-926053069">properties</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Monitoring Decisions with Abbreviated Results" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;ONAPName&quot;: &quot;DCAE&quot;,&#xd;
  &quot;ONAPComponent&quot;: &quot;PolicyHandler&quot;,&#xd;
  &quot;ONAPInstance&quot;: &quot;622431a4-9dea-4eae-b443-3b2164639c64&quot;,&#xd;
  &quot;action&quot;: &quot;configure&quot;,&#xd;
  &quot;resource&quot;: {&#xd;
      &quot;policy-id&quot;: &quot;onap.restart.tca&quot;,&#xd;
      &quot;policy-type&quot;: &quot;onap.policies.monitoring.tcagen2&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${XACML_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${XACML_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pdpx/v1/decision?abbrev=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
          <stringProp name="TestPlan.comments">Get Configuration Data for Monitoring Policy</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3575610">type</stringProp>
              <stringProp name="-450004177">metadata</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-926053069">properties</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Naming Decisions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;ONAPName&quot;: &quot;SDNC&quot;,&#xd;
  &quot;ONAPComponent&quot;: &quot;SNDC-component&quot;,&#xd;
  &quot;ONAPInstance&quot;: &quot;SDNC-component-instance&quot;,&#xd;
  &quot;requestId&quot;: &quot;unique-request-sdnc-1&quot;,&#xd;
  &quot;action&quot;: &quot;naming&quot;,&#xd;
  &quot;resource&quot;: {&#xd;
      &quot;nfRole&quot;: [],&#xd;
      &quot;naming-type&quot;: [],&#xd;
      &quot;property-name&quot;: [],&#xd;
      &quot;policy-type&quot;: [&quot;onap.policies.Naming&quot;]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${XACML_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${XACML_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pdpx/v1/decision</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
          <stringProp name="TestPlan.comments">Get Configuration Data for Naming Policy</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3575610">type</stringProp>
              <stringProp name="-450004177">metadata</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-926053069">properties</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Optimization Decisions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;ONAPName&quot;: &quot;OOF&quot;,&#xd;
  &quot;ONAPComponent&quot;: &quot;OOF-component&quot;,&#xd;
  &quot;ONAPInstance&quot;: &quot;OOF-component-instance&quot;,&#xd;
  &quot;context&quot; : {&#xd;
      &quot;subscriberName&quot;: []&#xd;
  },&#xd;
  &quot;action&quot;: &quot;optimize&quot;,&#xd;
  &quot;resource&quot;: {&#xd;
      &quot;scope&quot;: [],&#xd;
      &quot;services&quot;: [],&#xd;
      &quot;resources&quot;: [],&#xd;
      &quot;geography&quot;: []&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${XACML_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${XACML_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pdpx/v1/decision</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
          <stringProp name="TestPlan.comments">Get Configuration Data for Optimization Policy</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3575610">type</stringProp>
              <stringProp name="-450004177">metadata</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-926053069">properties</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Default Guard Decisions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;ONAPName&quot;: &quot;Guard&quot;,&#xd;
  &quot;ONAPComponent&quot;: &quot;Guard-component&quot;,&#xd;
  &quot;ONAPInstance&quot;: &quot;Guard-component-instance&quot;,&#xd;
  &quot;requestId&quot;: &quot;unique-request-guard-1&quot;,&#xd;
  &quot;action&quot;: &quot;guard&quot;,&#xd;
  &quot;resource&quot;: {&#xd;
    &quot;guard&quot;: {&#xd;
      &quot;actor&quot;: &quot;APPC&quot;,&#xd;
      &quot;operation&quot;: &quot;ModifyConfig&quot;,&#xd;
      &quot;target&quot;: &quot;f17face5-69cb-4c88-9e0b-7426db7edddd&quot;,&#xd;
      &quot;requestId&quot;: &quot;c7c6a4aa-bb61-4a15-b831-ba1472dd4a65&quot;,&#xd;
      &quot;clname&quot;: &quot;ControlLoop-vFirewall-d0a1dfc6-94f5-4fd4-a5b5-4630b438850a&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${XACML_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${XACML_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pdpx/v1/decision</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
          <stringProp name="TestPlan.comments">Get Default Guard Decisions</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1907855301">Permit</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Frequency Limiter Guard  Decisions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;ONAPName&quot;: &quot;Policy&quot;,&#xd;
  &quot;ONAPComponent&quot;: &quot;drools-pdp&quot;,&#xd;
  &quot;ONAPInstance&quot;: &quot;usecase-template&quot;,&#xd;
  &quot;requestId&quot;: &quot;unique-request-id-1&quot;,&#xd;
  &quot;action&quot;: &quot;guard&quot;,&#xd;
  &quot;resource&quot;: {&#xd;
      &quot;guard&quot;: {&#xd;
          &quot;actor&quot;: &quot;SO&quot;,&#xd;
          &quot;operation&quot;: &quot;scaleOut&quot;,&#xd;
          &quot;clname&quot;: &quot;ControlLoop-vDNS-6f37f56d-a87d-4b85-b6a9-cc953cf779b3&quot;,&#xd;
          &quot;target&quot;: &quot;vLoadBalancer-00&quot;,&#xd;
          &quot;vfCount&quot;: &quot;1&quot;&#xd;
      }&#xd;
  }&#xd;
}&#xd;
&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${XACML_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${XACML_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pdpx/v1/decision</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
          <stringProp name="TestPlan.comments">Get Frequency Limiter Guard  Decisions</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1907855301">Permit</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Min/Max Guard Decisions" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;ONAPName&quot;: &quot;Policy&quot;,&#xd;
  &quot;ONAPComponent&quot;: &quot;drools-pdp&quot;,&#xd;
  &quot;ONAPInstance&quot;: &quot;usecase-template&quot;,&#xd;
  &quot;requestId&quot;: &quot;unique-request-id-1&quot;,&#xd;
  &quot;action&quot;: &quot;guard&quot;,&#xd;
  &quot;resource&quot;: {&#xd;
      &quot;guard&quot;: {&#xd;
          &quot;actor&quot;: &quot;SO&quot;,&#xd;
          &quot;operation&quot;: &quot;scaleOut&quot;,&#xd;
          &quot;clname&quot;: &quot;ControlLoop-vDNS-6f37f56d-a87d-4b85-b6a9-cc953cf779b3&quot;,&#xd;
          &quot;target&quot;: &quot;vLoadBalancer-00&quot;,&#xd;
          &quot;vfCount&quot;: &quot;1&quot;&#xd;
      }&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${XACML_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${XACML_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pdpx/v1/decision</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
          <stringProp name="TestPlan.comments">Get Min/Max Guard Decisions</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1907855301">Permit</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">${HTTP}://${XACML_HOST}:${XACML_PORT}/policy/pdpx/v1</stringProp>
              <stringProp name="Authorization.username">${XACML_USER}</stringProp>
              <stringProp name="Authorization.password">${XACML_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.clearEachIteration">true</boolProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/tmp/pdpx_perf_decisions.log</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.start_time">1587406332000</longProp>
        <longProp name="ThreadGroup.end_time">1587406332000</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Undeploy Monitoring Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${PAP_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${PAP_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pap/v1/pdps/policies/onap.restart.tca</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${PAP_HOST}:${PAP_PORT}/policy/pap/v1</stringProp>
                <stringProp name="Authorization.username">${PAP_USER}</stringProp>
                <stringProp name="Authorization.password">${PAP_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Undeploy Optimization Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${PAP_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${PAP_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pap/v1/pdps/policies/OSDF_CASABLANCA.Affinity_Default</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${PAP_HOST}:${PAP_PORT}/policy/pap/v1</stringProp>
                <stringProp name="Authorization.username">${PAP_USER}</stringProp>
                <stringProp name="Authorization.password">${PAP_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Undeploy Min/Max Guard Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${PAP_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${PAP_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pap/v1/pdps/policies/guard.minmax.scaleout</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${PAP_HOST}:${PAP_PORT}/policy/pap/v1</stringProp>
                <stringProp name="Authorization.username">${PAP_USER}</stringProp>
                <stringProp name="Authorization.password">${PAP_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Undeploy Frequency Limiter Guard Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${PAP_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${PAP_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/pap/v1/pdps/policies/guard.frequency.scaleout</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${PAP_HOST}:${PAP_PORT}/policy/pap/v1</stringProp>
                <stringProp name="Authorization.username">${PAP_USER}</stringProp>
                <stringProp name="Authorization.password">${PAP_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Monitoring Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/api/v1/policytypes/onap.policies.monitoring.tcagen2/versions/1.0.0/policies/onap.restart.tca/versions/1.0.0</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${API_HOST}:${API_PORT}/policy/api/v1</stringProp>
                <stringProp name="Authorization.username">${API_USER}</stringProp>
                <stringProp name="Authorization.password">${API_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Optimization Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/api/v1/policytypes/onap.policies.optimization.resource.AffinityPolicy/versions/1.0.0/policies/OSDF_CASABLANCA.Affinity_Default/versions/1.0.0</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${API_HOST}:${API_PORT}/policy/api/v1</stringProp>
                <stringProp name="Authorization.username">${API_USER}</stringProp>
                <stringProp name="Authorization.password">${API_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Min/Max Guard Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/api/v1/policytypes/onap.policies.controlloop.guard.MinMax/versions/1.0.0/policies/guard.minmax.scaleout/versions/1.0.0</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${API_HOST}:${API_PORT}/policy/api/v1</stringProp>
                <stringProp name="Authorization.username">${API_USER}</stringProp>
                <stringProp name="Authorization.password">${API_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Frequency Limiter Guard Policy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${API_HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${API_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${HTTP}</stringProp>
          <stringProp name="HTTPSampler.path">policy/api/v1/policytypes/onap.policies.controlloop.guard.FrequencyLimiter/versions/1.0.0/policies/guard.frequency.scaleout/versions/1.0.0</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">${HTTP}://${API_HOST}:${API_PORT}/policy/api/v1</stringProp>
                <stringProp name="Authorization.username">${API_USER}</stringProp>
                <stringProp name="Authorization.password">${API_PASSWORD}</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.clearEachIteration">true</boolProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/tmp/pdpx_perf_teardown.log</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/tmp/pdpx_perf_summaryReport.log</stringProp>
        <boolProp name="useGroupName">true</boolProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/tmp/pdpx_perf_resultsTree.log</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/tmp/pdpx_perf_resultsTable.log</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
