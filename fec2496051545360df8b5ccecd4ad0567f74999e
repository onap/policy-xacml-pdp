{
  "comments": [
    {
      "key": {
        "uuid": "32aeea50_1caca77c",
        "filename": "applications/common/src/main/java/org/onap/policy/pdp/xacml/application/common/matchable/MatchablePolicyType.java",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-03-18T21:23:21Z",
      "side": 1,
      "message": "I was thinking just put MatchablePropertyTypeString::new, etc., into the map values.  Then the construction of the map would be much cleaner.  In fact, could probably use Map.of() then:\n\n  Map\u003cString,Function\u003cToscaProperty,MatchablePropertyTypeBase\u003e\u003e map \u003d Map.of(\n    TOSCA_PRIMITIVE_STRING, MatchablePropertyTypeString::new,\n    ...\n    );\n\nAll of this assumes that java will match the correct \"new\" operator; it may have a problem since there is a new(ToscaPolicy) and a new(ToscaSchemaEntity), but I THINK it will work.  If not, then I\u0027d probably just put it back the way it was.",
      "revId": "fec2496051545360df8b5ccecd4ad0567f74999e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aede6ee5_a3fc867d",
        "filename": "applications/common/src/main/java/org/onap/policy/pdp/xacml/application/common/matchable/MatchablePolicyType.java",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-03-18T21:23:21Z",
      "side": 1,
      "message": "with the changes I suggested above, this would be:\n\n  return new MatchableProperty(property, construct.apply(toscaProperty));\n\nThe map MAY be faster since it computes a hash and finds it rather than potentially doing multiple comparisons.  If there were only 2-3 of these, then I would have left it as was, but with this many items, makes more sense to put the \"different\" parts into a map, while keeping the common stuff (i.e., new MatchableProperty()) in one place.",
      "revId": "fec2496051545360df8b5ccecd4ad0567f74999e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b81da3cf_de5b4521",
        "filename": "applications/common/src/main/java/org/onap/policy/pdp/xacml/application/common/matchable/MatchablePropertyTypeInteger.java",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-03-18T21:23:21Z",
      "side": 1,
      "message": "\"float\" \u003d\u003e \"integer\"",
      "revId": "fec2496051545360df8b5ccecd4ad0567f74999e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "835e6e1a_1638ce96",
        "filename": "applications/common/src/main/java/org/onap/policy/pdp/xacml/application/common/matchable/MatchablePropertyTypeMap.java",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-03-18T21:23:21Z",
      "side": 1,
      "message": "duplicate code - could extract these lines and put them into the superclass",
      "revId": "fec2496051545360df8b5ccecd4ad0567f74999e",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}